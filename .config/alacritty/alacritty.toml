[general]
# If ~/.alacritty_theme.toml exists (handled  by LaunchAgent on macOS),
# it will import light.toml or dark.toml and overwrite first import
import = ["themes/light.toml", "~/.alacritty_theme.toml"]

[window]
padding = { x = 5, y = 5 }
# Even padding
dynamic_padding = true
decorations = "Full"
# Disabled for now because shadows are not working
# opacity = 0.95
# blur = true
startup_mode = "Windowed"
dynamic_title = true
decorations_theme_variant = "None"
resize_increments = false
# Left for <A-..> bindings in Neovim, Right for special chars
option_as_alt = "OnlyLeft"

[scrolling]
history = 100000
multiplier = 3

[font]
normal = { family = "JetBrainsMono Nerd Font", style = "Regular" }
size = 13
offset = { x = 1, y = 7 }
glyph_offset = { x = 0, y = 4 }
builtin_box_drawing = true

[colors]
# Provided in themes/lighttoml or theme/dark.toml

[bell]
duration = 100
animation = "EaseOutExpo"
command = { program = "osascript", args = ["-e", "beep"] }

[selection]
save_to_clipboard = false

[cursor.style]
shape = "Block"
blinking = "Always"

[cursor]
blink_interval = 500
blink_timeout = 60
unfocused_hollow = true
thickness = 0.2

[terminal]
# Always open a shell in the home directory

[terminal.shell]
# Always open a shell in the home directory
program = "/bin/zsh"
args = ["-c", "cd ~; zsh"]

# Tmux integration like in iTerm
# Start every new window with a tmux session in a `alacritty` group and attach to it
# Keybinding is changed to kill session if its window is closed
# (window name is the same as session name that started that window)
# program = "/run/current-system/sw/bin/tmux"
# args = [
#   "new",
#   "-A",
#   "-t",
#   "alacritty",
#   "-s",
#   "0",
#   ";",
#   # renames window to 0 to have the same name as session
#   "rename-window",
#   "0",
#   ";",
#   # binds Ctrl+B x to kill pane without confirmation but with special logic
#   "bind-key",
#   "x",
#   "if-shell",
#   # test if it's the last pane in the current window
#   "/run/current-system/sw/bin/tmux display-message -p '#{window_panes}' | grep ^1\\$",
#   # if it is the last pane, check if there is only one window left in the group
#   # if there is only one window left, detach the client (always keeps last window and session running)
#   # if not the last window in the group, kill the pane and the session by window name (same as session name)
#   "if-shell 'test $(/run/current-system/sw/bin/tmux list-windows | wc -l) -eq 1' 'detach-client' 'run-shell \"/run/current-system/sw/bin/tmux kill-pane ; /run/current-system/sw/bin/tmux kill-session -t \\\"#{window_name}\\\"\"'",
#   # if not the last pane just kill the pane
#   "kill-pane",
#   ";",
#   # removes status bar
#   "set-option",
#   "-g",
#   "status",
#   "off",
# ]

[mouse]
hide_when_typing = true
bindings = [{ mouse = "Left", mods = "Shift", action = "ExpandSelection" }]

[hints] # For special text and hyperlinks

[keyboard]
bindings = [

  # Tmux integration like in iTerm
  # # `⌘ + T` creates new tab and starts a new tmux session in the `alacritty` group
  # { key = "T", mods = "Command", command = { program = "/opt/homebrew/bin/alacritty", args = [
  #   "msg",
  #   "create-window",
  #   "--command",
  #   "/bin/zsh",
  #   "-c",
  #   # Uses Alacritty's window id as tmux session name and window name
  #   "tmux new -A -t alacritty -s $ALACRITTY_WINDOW_ID \\; new-window -n $ALACRITTY_WINDOW_ID && exit",
  # ] } },
  # # Sends `Ctrl+B` x to tmux session to trigger special key binding
  # # (close pane or close pane and kill session)
  # { key = "W", mods = "Command", chars = "\u0002x" },

  # Simple Tmux integration for persistent shells
  # Opens a new tab (window) with persistent shell handled by tmux
  { key = "P", mods = "Command", command = { program = "/opt/homebrew/bin/alacritty", args = [
    "msg",
    "create-window",
    "-e",
    "/bin/zsh",
    "-c",
    # Uses Alacritty's window id as tmux session name and window name
    """
    tmux new -A -t alacritty -s $ALACRITTY_WINDOW_ID \
      \\; if-shell \"[ '#{window_name}' = 'zsh' ]\" \
        "rename-window 0" "new-window" \
      \\; rename "#{window_id}" \
      \\; bind-key x if-shell "echo '#{window_panes}' | grep ^1$" \
        "kill-pane; run-shell 'tmux kill-session -t \\"#{window_id}\\"'" \
        "kill-pane" \
    && exit
    """,
  ] } },
  # Reattach to all tmux session in alacritty group while creating Alacritty
  # window for each tmux session
  { key = "G", mods = "Command", command = { program = "/bin/zsh", args = [
    "-c",
    # Uses Alacritty's window id as tmux session name and window name
    # bash
    """
    /run/current-system/sw/bin/tmux list-sessions \
      -F '#{session_name}:#{window_name}:#{?session_attached,att,not}:#{session_group}' | while read -r session; do \
        ses_name=$(echo $session | cut -d: -f1); \
        if [ "$(echo $session | cut -d: -f3)" = "not" ] && [ "$(echo $session | cut -d: -f4)" = "alacritty" ] ; then \
          /opt/homebrew/bin/alacritty msg create-window -e /bin/zsh -c "tmux attach -d -t \"$ses_name\""; \
        fi; \
      done;
    """,
  ] } },
  # Prompts user to select a tmux session to attach to in a new tab
  { key = "T", mods = "Command|Alt", command = { program = "/opt/homebrew/bin/alacritty", args = [
    "msg",
    "create-window",
    "--title",
    "Select Persistent Shell",
    "-e",
    "/bin/zsh",
    "-c",
    """
    selected=$(/run/current-system/sw/bin/tmux list-windows \
      -F '#{window_id}:#{window_name}:#{?window_active_clients,att,not}:#{session_group}' | \
      grep ':not:alacritty$' | \
      awk -F: '{printf \"%-4s %s\\n\", $1, $2}' | \
      fzf --height 40% --reverse) && \
    selected_id=$(echo $selected | cut -w -f1); \
    if [ ! -z "$selected_id" ]; then \
      /opt/homebrew/bin/alacritty msg create-window -e /bin/zsh -c " \
      tmux attach -d -t \"$selected_id\" \\; select-window -t \"$selected_id\" \
      "; \
    fi
    """,
  ] } },
  { key = "T", mods = "Command|Shift", command = { program = "/opt/homebrew/bin/alacritty", args = [
    "msg",
    "create-window",
    "-e",
    "/bin/zsh",
    "-c",
    """
      echo 1 | fzf --height 40% --reverse
    """,
  ] } },


  # Tmux universal key bindings
  # `⌘ + ⌥ + w` to close the pane (sends `Ctrl+B x`)
  { key = "W", mods = "Command|Alt", chars = "\u0002x" },
  # `⌘ + ⌥  + arrows` are for directional navigation around the panes
  # move down a pane
  { key = "Down", mods = "Command|Alt", chars = "\u0002\u001b[B" },
  { key = "j", mods = "Command|Alt", chars = "\u0002\u001b[B" },
  # move up a pane
  { key = "Up", mods = "Command|Alt", chars = "\u0002\u001b[A" },
  { key = "k", mods = "Command|Alt", chars = "\u0002\u001b[A" },
  # move left a pane
  { key = "Left", mods = "Command|Alt", chars = "\u0002\u001b[D" },
  { key = "h", mods = "Command|Alt", chars = "\u0002\u001b[D" },
  # move right a pane
  { key = "Right", mods = "Command|Alt", chars = "\u0002\u001b[C" },
  { key = "l", mods = "Command|Alt", chars = "\u0002\u001b[C" },
  # ⌘ + d adds a pane to the right (splits window vertically)
  { key = "D", mods = "Command", chars = "\u0002%" },
  # ⌘ + ⇧ + d adds a pane below (splits window horizontally)
  { key = "D", mods = "Command|Shift", chars = "\u0002\"" },

  # Convenience
  { key = "Escape", mods = "Alt", action = "ToggleViMode" },
  # ⌘ + enter puts window in macOS full screen
  { key = "Enter", mods = "Command", action = "ToggleFullscreen" },
  # ⌥ + → and ← move between words
  { key = "Right", mods = "Alt", chars = "\u001BF" },
  { key = "Left", mods = "Alt", chars = "\u001BB" },
]
